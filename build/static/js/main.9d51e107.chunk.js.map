{"version":3,"sources":["features/counter/counterSlice.js","styles.js","stores/pageSlice.js","components/Navbar.js","components/Home.js","components/About.js","components/UserList.js","components/User.js","stores/jokeSlice.js","components/Joke.js","components/Main.js","App.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","useStyles","makeStyles","theme","title","marginRight","spacing","appBarSpacer","mixins","toolbar","pageSlice","page","setPage","console","log","selectPage","Navbar","props","classes","dispatch","useDispatch","AppBar","position","Toolbar","Link","component","RouterLink","to","color","className","onClick","Home","useSelector","Typography","About","columns","data","UserList","history","useHistory","options","onRowClick","rowData","rowMeta","push","type","height","User","match","useRouteMatch","params","id","Object","keys","l","forEach","k","jokeSlice","joke","setJoke","selectJoke","Joke","Button","variant","axios","get","then","response","slip","advice","catch","error","Main","exact","path","App","configureStore","reducer","pageReducer","jokeReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9d51e107.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n    title: {\n        marginRight: theme.spacing(2)\n    },\n    appBarSpacer: theme.mixins.toolbar,\n}));\n\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const pageSlice = createSlice({\n    name: 'pageStore',\n    initialState: {\n      page: \"home\",\n    },\n    reducers: {\n      setPage: (state, action) => {\n          console.log(\"action\", action);\n            state.page = action.payload.page;\n      },\n    }\n  });\n\nexport const { setPage } = pageSlice.actions;\nexport const selectPage = state => state.page.page;\nexport default pageSlice.reducer;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Typography } from '@material-ui/core';\nimport {useStyles} from '../styles';\nimport Link from '@material-ui/core/Link';\nimport {Link as RouterLink, BrowserRouter as Router} from \"react-router-dom\"\nimport { useDispatch } from 'react-redux';\nimport {setPage} from \"../stores/pageSlice\";\n\nexport default function Navbar(props) {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n\n                    <Link component={RouterLink} to=\"/\" color=\"inherit\" className={classes.title}\n                     onClick={() => dispatch(setPage({page: \"home\"}))}>\n                        home\n                    </Link>\n                    <Link component={RouterLink} to=\"/about\" color=\"inherit\" className={classes.title}\n                    onClick= {() => dispatch(setPage({page: \"about\"}))}\n                    >\n                        about\n                    </Link>\n                    <Link component={RouterLink} to=\"/users\" color=\"inherit\" className={classes.title}\n                    onClick= {() => dispatch(setPage({page: \"users\"}))}\n                    >\n                        users\n                    </Link>\n                    <Link component={RouterLink} to=\"/joke\" color=\"inherit\" className={classes.title}\n                    onClick= {() => dispatch(setPage({page: \"joke\"}))}\n                    >\n                        joke\n                    </Link>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import React from \"react\"\nimport { Typography } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    selectPage,\n} from '../stores/pageSlice';\n\nexport default function Home() {\n    const page = useSelector(selectPage);\n    console.log(page);\n    return(\n        <Typography>\n            This is Home: state = {page}\n        </Typography>\n    );    \n}","import React from \"react\"\nimport { Typography } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    selectPage,\n} from '../stores/pageSlice';\n\nexport default function About() {\n    const page = useSelector(selectPage);\n    console.log(page);\n    return(\n        <Typography>\n            This is About: state = {page}\n        </Typography>\n    );    \n}","import React from \"react\"\nimport { Typography } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport MUIDataTable from \"mui-datatables\";\nimport {\n    selectPage,\n} from '../stores/pageSlice';\n\nimport {\n    useHistory\n} from 'react-router-dom'\n\n\nconst columns = [\"user id\", \"name\", \"status\", \"date\"];\n\nconst data = [\n    [\"123456\", \"島村卯月\", \"Active\", \"2020-06-01\"],\n    [\"abcdef\", \"渋谷凛\", \"Active\", \"2020-05-31\"],\n    [\"abc123\", \"本田未央\", \"Inactive\", \"\"],\n    [\"aaaddd\", \"双葉杏\", \"Active\", \"2020-06-01\"],\n];\n\n\nexport default function UserList() {\n    const page = useSelector(selectPage);\n    const history = useHistory();   \n    console.log(page);\n\n    const options = {\n        onRowClick: (rowData, rowMeta) => {\n            history.push(`/users/${rowData[0]}`);\n        }\n    };\n    \n    return(\n        <div>\n            <MUIDataTable title={\"members\"} data={data}  columns={columns} options={options} />\n        </div> \n        \n    );    \n}","import React from \"react\"\nimport { Typography } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport MUIDataTable from \"mui-datatables\";\nimport {\n    selectPage,\n} from '../stores/pageSlice';\n\nimport {\n    useRouteMatch\n} from 'react-router-dom'\n\n\nconst columns = [\"user id\", \"name\", \"status\", \"date\"];\n\n\nconst data = {\n    \"123456\": {name: \"島村卯月\", type: \"Cute\", height: 159},\n    \"abcdef\": {name: \"渋谷凛\", type: \"Cool\", height: 165},\n    \"abc123\":　{name: \"本田未央\", type: \"Passion\", height: 161},\n    \"aaaddd\": {name: \"双葉杏\", type: \"Cute\", height: 139}\n};\n\nexport default function User() {\n    const page = useSelector(selectPage);\n    const match = useRouteMatch(\"/users/:id\");\n    console.log(\"match\", match.params.id);\n    console.log(Object.keys(data[match.params.id]));\n    const l = [];\n    Object.keys(data[match.params.id]).forEach(k => {\n        l.push(\n            <Typography>\n                {k} : {data[match.params.id][k]}\n            </Typography>\n        )});\n \n    return(\n        <div>\n            {l}\n        </div> \n    );\n}","import { createSlice } from '@reduxjs/toolkit';\n\nexport const jokeSlice = createSlice({\n    name: 'jokeStore',\n    initialState: {\n      joke: \"\",\n    },\n    reducers: {\n      setJoke: (state, action) => {\n            console.log(\"action\", action);\n            state.joke = action.payload.joke;\n      },\n    }\n  });\n\nexport const { setJoke } = jokeSlice.actions;\nexport const selectJoke = state => state.joke.joke;\nexport default jokeSlice.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    selectJoke, setJoke,\n} from '../stores/jokeSlice';\n\n\nexport default function Joke() {\n    const url = \"https://api.adviceslip.com/advice\";\n    const joke = useSelector(selectJoke);\n\n    const dispatch = useDispatch();\n\n    function handleClick() {\n         axios.get(url).then(response => {\n                console.log(response.data);\n                dispatch(setJoke({joke: response.data.slip.advice}));\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n\n    return (\n        <div>\n            <Typography>\n                {joke}\n            </Typography>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleClick()}>\n                reload\n            </Button>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { Route, Switch, useParams } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\nimport UserList from \"./UserList\";\nimport User from \"./User\";\nimport Joke from \"./Joke\";\n\nexport default function Main(props) {\n    return(\n        <div>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route path=\"/about\">\n                    <About />\n                </Route>\n                <Route exact path=\"/users\">\n                    <UserList />\n                </Route>\n                <Route path=\"/users/:id\">\n                    <User />\n                </Route>\n                <Route path=\"/joke\">\n                    <Joke />\n                </Route>\n\n            </Switch>\n        </div>\n    );\n}","import React from 'react';\r\nimport { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport {useStyles} from \"./styles\";\r\nimport Main from \"./components/Main\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Navbar />\r\n          <div className={classes.appBarSpacer} />\r\n        <Main />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport pageReducer from '../stores/pageSlice';\r\nimport jokeReducer from '../stores/jokeSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    page: pageReducer,\r\n    joke: jokeReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}